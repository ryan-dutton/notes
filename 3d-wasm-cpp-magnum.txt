Steps required to render 3D in a web-browser using WASM and C++
===============================================================

Create a base machine
=====================
- Install Virtualbox
- Download Fedora ISO Image V37 worked
- Create a Fedora Virtual Machine using downloaded ISO (8GB RAM / 40GB HD)

Onen a console.  You should be in your home directory '~'

Install Emscripten
==================
Emscripten is required to provide a C/C++ toolchain targetting WASM
git clone https://github.com/emscripten-core/emsdk.git
cd emsdk
./emsdk install latest
./emsdk activate latest


Install Magnum bootstrap project
=================================
wget https://github.com/mosra/magnum-bootstrap/archive/base.zip
unzip base.zip
cd magnum-bootstrap-base

Install Magnum and Corrade libs (under magnum-bootstrap-base)
=================================================
git clone https://github.com/mosra/corrade.git
git clone https://github.com/mosra/magnum.git

Edit CMakeLists.txt and replace contents with:

cmake_minimum_required(VERSION 3.4)
project(MyApplication)

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/modules/" ${CMAKE_MODULE_PATH})

# Add Corrade as a subproject
add_subdirectory(corrade EXCLUDE_FROM_ALL)

# Add Magnum as a subproject, enable Sdl2Application
set(MAGNUM_WITH_SDL2APPLICATION ON CACHE BOOL "" FORCE)
add_subdirectory(magnum EXCLUDE_FROM_ALL)

add_subdirectory(src)




Install CMake and other libs
==========================
sudo dnf install cmake gcc g++ SDL2-devel


Run a test build (SLD2 window, not emscripten)
==========================
mkdir -p build && cd build
cmake -DCMAKE_BUILD_TYPE=Debug ..
cmake --build .
#run the test
./Debug/bin/MyApplication
#you should see a blank window

Get the toolchains for alternive builds (e.g. emscripten)
=========================================================
cd ~/magnum-bootstrap-base
git clone https://github.com/mosra/toolchains.git
cd corrade
cp -R ../toolchains .
#now have toolchains in both magnum-bootstrap-base and corrade

Build Corrade for Emscripten
====================
#first do a manual build of corrade to generate corrade-rc executable
cd ~/magnum-bootstrap-base/corrade
mkdir build && cd build
cmake .. -DCORRADE_BUILD_STATIC=On
cmake --build .
find -name "corrade-rc"
# should be found at ./bin/corrade-rc
# equating to ~/magnum-bootstrap-base/corrade/bin/corrade-rc
# now build Corrade 'for' emscripten
cd ~/magnum-bootstrap-base/corrade

mkdir build-emscripten && cd build-emscripten
cmake .. -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Emscripten-wasm.cmake" -DEMSCRIPTEN_PREFIX=~/emsdk/upstream/emscripten  -DCMAKE_BUILD_TYPE=Release -DCORRADE_RC_EXECUTABLE=~/magnum-bootstrap-base/corrade/build/bin/corrade-rc
cmake --build .

cd ../..
pwd #should be /home/ryan/magnum-bootstrap-base
mkdir build-emscripten && cd build-emscripten
cmake .. -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Emscripten-wasm.cmake" -DCMAKE_BUILD_TYPE=Release -DCORRADE_RC_EXECUTABLE=~/magnum-bootstrap-base/corrade/build/bin/corrade-rc -DEMSCRIPTEN_PREFIX=~/emsdk/upstream/emscripten
cmake --build .

#MyApplication.js and MyApplication.wasm should be in ./Release/bin
cd ./Release/bin
nano index.html
#enter contents

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Magnum Emscripten Application</title>
  <link rel="stylesheet" href="WebApplication.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
  <h1>Magnum Emscripten Application</h1>
  <div class="mn-container">
    <div class="mn-sizer"><div class="mn-expander"><div class="mn-listener">
      <canvas class="mn-canvas" id="canvas"></canvas>
      <div class="mn-status" id="status">Initialization...</div>
      <div class="mn-status-description" id="status-description"></div>
      <script src="EmscriptenApplication.js"></script>
      <script async="async" src="MyApplication.js"></script>
    </div></div></div>
  </div>
</body>
</html>

cp ../../../magnum/src/Magnum/Platform/WebApplication.css .
cp ../../../magnum/src/Magnum/Platform/EmscriptenApplication.js .

python3 -m http.server

#replace src/MyApplication.cpp with:

START FILE

#include <Magnum/GL/Buffer.h>
#include <Magnum/GL/DefaultFramebuffer.h>
#include <Magnum/GL/Mesh.h>
#include <Magnum/Math/Color.h>
#include <Magnum/Platform/Sdl2Application.h>
#include <Magnum/Shaders/VertexColorGL.h>

namespace Magnum { namespace Examples {

class TriangleExample: public Platform::Application {
    public:
        explicit TriangleExample(const Arguments& arguments);

    private:
        void drawEvent() override;

        GL::Mesh _mesh;
        Shaders::VertexColorGL2D _shader;
};

TriangleExample::TriangleExample(const Arguments& arguments):Platform::Application{arguments, Configuration{}.setTitle("Magnum Triangle Example")}
{
    using namespace Math::Literals;

    struct TriangleVertex {
        Vector2 position;
        Color3 color;
    };
    const TriangleVertex vertices[]{
        {{-0.5f, -0.5f}, 0xff0000_rgbf},    /* Left vertex, red color */
        {{ 1.0f, -1.0f}, 0x00ff00_rgbf},    /* Right vertex, green color */
        {{ 0.0f,  0.5f}, 0x00ff00_rgbf},     /* Top vertex, blue color */
		{{-1.0f, -1.0f}, 0xff0000_rgbf},    /* Left vertex, red color */
        {{ 1.0f, -0.5f}, 0x00ff00_rgbf},    /* Right vertex, green color */
        {{ 0.0f,  0.4f}, 0x0000ff_rgbf}     /* Top vertex, blue color */
    };

    _mesh
		.setCount(Containers::arraySize(vertices))
		.addVertexBuffer(GL::Buffer{vertices}, 0, Shaders::VertexColorGL2D::Position{}, Shaders::VertexColorGL2D::Color3{});
}

void TriangleExample::drawEvent() {
    GL::defaultFramebuffer.clear(GL::FramebufferClear::Color);

	_shader.draw(_mesh);
	
    swapBuffers();
}

}}

MAGNUM_APPLICATION_MAIN(Magnum::Examples::TriangleExample)

END FILE

#edit src/CMakeLists.txt and add in Magnum::Shaders

START FILE

find_package(Magnum REQUIRED GL Sdl2Application)

set_directory_properties(PROPERTIES CORRADE_USE_PEDANTIC_FLAGS ON)

add_executable(MyApplication MyApplication.cpp)
target_link_libraries(MyApplication PRIVATE
    Magnum::Application
    Magnum::GL
    Magnum::Magnum
    Magnum::Shaders
)

# Make the executable a default target to build & run in Visual Studio
set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT MyApplication)

END FILE


#Edit src/CMakeLists.txt and add 'Magnum::Shaders' to target_link_libraries
cd ~/magnum-bootstrap-base/build-emscripten

#build again
cmake .. -DCMAKE_TOOLCHAIN_FILE="../toolchains/generic/Emscripten-wasm.cmake" -DCMAKE_BUILD_TYPE=Release -DCORRADE_RC_EXECUTABLE=~/magnum-bootstrap-base/corrade/build/bin/corrade-rc -DEMSCRIPTEN_PREFIX=~/emsdk/upstream/emscripten
cmake --build .

redo index.html etc again and statr pyhton webserver again



